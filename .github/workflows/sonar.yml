name: SonarCloud CI & Security Report

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarCloud Scan and Generate Report
    runs-on: ubuntu-latest

    steps:
      # 1. ดึงโค้ดจาก GitHub
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ต้องเป็น 0 เพื่อให้ SonarCloud อ่าน commit history ได้ถูกต้อง

      # 2. รันการสแกนด้วย SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.organization=nittayajp31-create
            -Dsonar.projectKey=devjp31_sample-app
            -Dsonar.host.url=https://sonarcloud.io

      # 3. ตรวจสอบสถานะ Quality Gate จาก SonarCloud API
      - name: Check Quality Gate status
        id: qualitygate
        run: |
          echo "Checking SonarCloud Quality Gate status..."
          response=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=devjp31_sample-app")

          echo "Response: $response"
          status=$(echo $response | jq -r '.projectStatus.status')

          echo "Quality Gate Status: $status"
          echo "status=$status" >> $GITHUB_ENV  # ✅ ใช้ env.status ต่อ

      # 4. สร้างรายงาน PDF เมื่อผลสแกน “ผ่าน”
            # 4. Generate Professional PDF Report (Blue Theme with Severity Colors)
      - name: Generate PDF Report
        if: env.status == 'OK'
        run: |
          echo "Generating SonarCloud PDF Report (Professional Blue Edition)..."
          pip install reportlab requests beautifulsoup4
          python <<'EOF'
          import requests
          from datetime import datetime, UTC
          from reportlab.lib.pagesizes import A4
          from reportlab.pdfgen import canvas
          from reportlab.lib import colors
          from reportlab.lib.units import inch
          from bs4 import BeautifulSoup

          TOKEN = "${{ secrets.SONAR_TOKEN }}"
          PROJECT_KEY = "devjp31_sample-app"
          HOST = "https://sonarcloud.io"

          # === Fetch data from SonarCloud ===
          metrics_url = f"{HOST}/api/measures/component?component={PROJECT_KEY}&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density"
          issues_url = f"{HOST}/api/issues/search?componentKeys={PROJECT_KEY}&statuses=OPEN,CONFIRMED,REOPENED&ps=200"

          metrics = requests.get(metrics_url, auth=(TOKEN, "")).json()
          issues = requests.get(issues_url, auth=(TOKEN, "")).json().get("issues", [])

          m = {item["metric"]: item["value"] for item in metrics["component"]["measures"]}

          # === Severity Color Map ===
          SEVERITY_COLOR = {
              "BLOCKER": colors.red,
              "CRITICAL": colors.Color(1, 0.4, 0),  # ส้มเข้ม
              "MAJOR": colors.orange,
              "MINOR": colors.Color(0.2, 0.5, 1),   # ฟ้า
              "INFO": colors.grey,
          }

          # === Create PDF ===
          c = canvas.Canvas("Sonar_Report.pdf", pagesize=A4)
          width, height = A4
          y = height - 70

          # === Header ===
          c.setFillColor(colors.HexColor("#0b6fa4"))
          c.setFont("Helvetica-Bold", 20)
          c.drawString(70, y, "SonarCloud Security & Code Quality Report")
          y -= 25

          c.setFont("Helvetica", 11)
          c.setFillColor(colors.black)
          c.drawString(70, y, f"Project: {PROJECT_KEY}")
          y -= 15
          c.drawString(70, y, f"Host: {HOST}")
          y -= 15
          c.drawString(70, y, f"Generated: {datetime.now(UTC).strftime('%Y-%m-%d %H:%M UTC')}")
          y -= 20
          c.setStrokeColor(colors.HexColor("#0b6fa4"))
          c.line(70, y, width - 70, y)
          y -= 25

          # === Summary Metrics Table ===
          c.setFont("Helvetica-Bold", 13)
          c.setFillColor(colors.HexColor("#0b6fa4"))
          c.drawString(70, y, "Summary Metrics")
          y -= 20

          table_data = [
              ("Bugs", m.get("bugs", "0")),
              ("Code Smells", m.get("code_smells", "0")),
              ("Vulnerabilities", m.get("vulnerabilities", "0")),
              ("Coverage (%)", m.get("coverage", "0")),
              ("Duplicated Lines (%)", m.get("duplicated_lines_density", "0")),
          ]
          for label, value in table_data:
              c.setFont("Helvetica-Bold", 10)
              c.setFillColor(colors.HexColor("#0b6fa4"))
              c.drawString(80, y, f"{label}:")
              c.setFont("Helvetica", 10)
              c.setFillColor(colors.black)
              c.drawString(200, y, value)
              y -= 15

          # === Severity Overview ===
          y -= 10
          c.setFont("Helvetica-Bold", 13)
          c.setFillColor(colors.HexColor("#0b6fa4"))
          c.drawString(70, y, "Issue Overview")
          y -= 20

          severities = {"BLOCKER": 0, "CRITICAL": 0, "MAJOR": 0, "MINOR": 0, "INFO": 0}
          for issue in issues:
              s = issue.get("severity", "INFO").upper()
              if s in severities:
                  severities[s] += 1

          for sev, count in severities.items():
              c.setFillColor(SEVERITY_COLOR[sev])
              c.setFont("Helvetica-Bold", 10)
              c.drawString(80, y, f"{sev.title():<10}")
              c.setFillColor(colors.black)
              c.setFont("Helvetica", 10)
              c.drawString(200, y, str(count))
              y -= 15

          # === Detailed Issues ===
          y -= 10
          c.setFont("Helvetica-Bold", 13)
          c.setFillColor(colors.HexColor("#0b6fa4"))
          c.drawString(70, y, "Detailed Issues")
          y -= 20

          for issue in issues:
              if y < 100:
                  c.showPage()
                  y = height - 70

              typ = issue["type"]
              sev = issue["severity"]
              file = issue.get("component", "").split(":")[-1]
              line = issue.get("line", "N/A")
              rule = issue.get("rule", "N/A")
              msg = issue.get("message", "")
              status = issue.get("status", "")
              rule_desc = ""

              # Fetch rule description
              try:
                  rule_api = f"{HOST}/api/rules/show?key={rule}"
                  rule_data = requests.get(rule_api, auth=(TOKEN, "")).json()
                  html_desc = rule_data.get("rule", {}).get("htmlDesc", "")
                  rule_desc = BeautifulSoup(html_desc, "html.parser").get_text().strip()
              except Exception:
                  rule_desc = "(No solution available)"

              # Render issue
              c.setFillColor(SEVERITY_COLOR.get(sev, colors.black))
              c.setFont("Helvetica-Bold", 11)
              c.drawString(80, y, f"Type: {typ}, Severity: {sev}, Status: {status}")
              y -= 14
              c.setFillColor(colors.black)
              c.setFont("Helvetica-Oblique", 9)
              c.drawString(100, y, msg)
              y -= 12
              c.setFont("Helvetica", 9)
              c.drawString(100, y, f"File: {file}, Line: {line}, Rule: {rule}")
              y -= 12

              c.setFont("Helvetica-Bold", 9)
              c.setFillColor(colors.HexColor("#0b6fa4"))
              c.drawString(100, y, "Solution:")
              y -= 11
              c.setFont("Helvetica", 9)
              c.setFillColor(colors.black)
              for line_text in rule_desc.split("\n"):
                  c.drawString(110, y, line_text[:130])
                  y -= 10
                  if y < 100:
                      c.showPage()
                      y = height - 70
              y -= 10
              c.setStrokeColor(colors.HexColor("#d0d0d0"))
              c.line(80, y, width - 80, y)
              y -= 15

          # === Footer ===
          c.setFont("Helvetica-Oblique", 9)
          c.setFillColor(colors.grey)
          c.drawString(70, 60, "End of Report — Generated automatically by GitHub Actions & SonarCloud.")
          c.save()
          EOF


      # 5. อัปโหลด PDF เป็น Artifact
      - name: Upload PDF Report
        if: env.status == 'OK'
        uses: actions/upload-artifact@v4
        with:
          name: sonarcloud-report
          path: ${{ github.workspace }}/Sonar_Report.pdf

      # 6. แจ้งเตือนเมื่อไม่ผ่าน
      - name: Fail if Quality Gate failed
        if: env.status != 'OK'
        run: |
          echo "SonarCloud Quality Gate failed. Please review the issues in SonarCloud dashboard."
          exit 1
