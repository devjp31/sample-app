name: SonarCloud CI & Security Report

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarCloud Scan and Generate Report
    runs-on: ubuntu-latest

    steps:
      # 1. ดึงโค้ดจาก GitHub
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. รันการสแกนด้วย SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.organization=nittayajp31-create
            -Dsonar.projectKey=devjp31_sample-app
            -Dsonar.host.url=https://sonarcloud.io

      # (เพิ่มขั้นตอนรอ SonarCloud ประมวลผล)
      - name: Wait for SonarCloud processing
        run: |
          echo "Waiting 60 seconds for SonarCloud to finalize analysis..."
          sleep 60

      # 3. ตรวจสอบสถานะ Quality Gate จาก SonarCloud API
      - name: Check Quality Gate status
        id: qualitygate
        run: |
          echo "Checking SonarCloud Quality Gate status..."
          response=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=devjp31_sample-app")
          echo "Response: $response"
          status=$(echo $response | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $status"

      # 4. สร้างรายงาน PDF เมื่อผลสแกน “ผ่าน”
      - name: Generate PDF Report
        if: steps.qualitygate.outputs.status == 'OK'
        run: |
          echo "Generating SonarCloud PDF Report..."
          pip install reportlab requests
          python <<EOF
          import requests
          from reportlab.lib.pagesizes import A4
          from reportlab.pdfgen import canvas

          url = "https://sonarcloud.io/api/qualitygates/project_status?projectKey=devjp31_sample-app"
          r = requests.get(url, auth=("${{ secrets.SONAR_TOKEN }}", ""))
          data = r.json()["projectStatus"]

          c = canvas.Canvas("Sonar_Report.pdf", pagesize=A4)
          c.setFont("Helvetica-Bold", 18)
          c.drawString(100, 800, "SonarCloud Scan Report")
          c.setFont("Helvetica", 12)
          c.drawString(100, 770, "Project: devjp31_sample-app")
          c.drawString(100, 750, f"Quality Gate: {data['status']}")

          y = 720
          for cond in data["conditions"]:
              c.drawString(100, y, f"{cond['metricKey']}: {cond['status']} (value={cond.get('value', 'N/A')})")
              y -= 20

          c.setFont("Helvetica-Oblique", 10)
          c.drawString(100, y-20, "Generated automatically by GitHub Actions and SonarCloud.")
          c.save()
          EOF

      # 5. อัปโหลด PDF เป็น Artifact (ให้ทีม Security ดาวน์โหลดได้)
      - name: Upload PDF Report
        if: steps.qualitygate.outputs.status == 'OK'
        uses: actions/upload-artifact@v4
        with:
          name: sonarcloud-report
          path: Sonar_Report.pdf

      # 6. ตรวจสอบสถานะจริงจาก API อีกครั้งเพื่อยืนยัน
      - name: Validate SonarCloud status directly
        run: |
          echo "Validating Quality Gate directly from SonarCloud API..."
          status=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=devjp31_sample-app" | jq -r '.projectStatus.status')
          echo "SonarCloud Quality Gate status: $status"
          if [ "$status" != "OK" ]; then
            echo "SonarCloud Quality Gate failed. Please review the issues in SonarCloud dashboard."
            exit 1
          fi
