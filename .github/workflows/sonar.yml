name: SonarCloud CI & Security Report

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarCloud Scan and Generate Report
    runs-on: ubuntu-latest

    steps:
      # 1. ดึงโค้ดจาก GitHub
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ต้องเป็น 0 เพื่อให้ SonarCloud อ่าน commit history ได้ถูกต้อง

      # 2. รันการสแกนด้วย SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.organization=nittayajp31-create
            -Dsonar.projectKey=devjp31_sample-app
            -Dsonar.host.url=https://sonarcloud.io

      # 3. ตรวจสอบสถานะ Quality Gate จาก SonarCloud API
      - name: Check Quality Gate status
        id: qualitygate
        run: |
          echo "Checking SonarCloud Quality Gate status..."
          response=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=devjp31_sample-app")

          echo "Response: $response"
          status=$(echo $response | jq -r '.projectStatus.status')

          echo "Quality Gate Status: $status"
          echo "status=$status" >> $GITHUB_ENV  # ✅ ใช้ env.status ต่อ

      # 4. สร้างรายงาน PDF เมื่อผลสแกน “ผ่าน”
      - name: Generate PDF Report
        if: env.status == 'OK'
        run: |
          echo "Generating Enhanced SonarCloud PDF Report..."
          pip install reportlab requests matplotlib
          python <<EOF
          import os, requests
          from datetime import datetime
          from reportlab.lib.pagesizes import A4
          from reportlab.pdfgen import canvas
          from reportlab.lib import colors

          TOKEN = "${{ secrets.SONAR_TOKEN }}"
          PROJECT_KEY = "devjp31_sample-app"
          HOST = "https://sonarcloud.io"

          # Path ที่แน่นอน
          output_path = os.path.join(os.getenv("GITHUB_WORKSPACE", "."), "Sonar_Report.pdf")

          metrics_url = f"{HOST}/api/measures/component?component={PROJECT_KEY}&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density"
          issues_url = f"{HOST}/api/issues/search?componentKeys={PROJECT_KEY}&statuses=OPEN,CONFIRMED,REOPENED&ps=200"

          metrics = requests.get(metrics_url, auth=(TOKEN, "")).json()
          issues = requests.get(issues_url, auth=(TOKEN, "")).json()["issues"]

          m = {item["metric"]: item["value"] for item in metrics["component"]["measures"]}

          c = canvas.Canvas(output_path, pagesize=A4)
          width, height = A4
          y = height - 80

          c.setFont("Helvetica-Bold", 18)
          c.drawString(70, y, "SonarCloud Security & Code Quality Report")
          y -= 25
          c.setFont("Helvetica", 11)
          c.drawString(70, y, f"Project: {PROJECT_KEY}")
          y -= 15
          c.drawString(70, y, f"Host: {HOST}")
          y -= 15
          c.drawString(70, y, f"Date: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}")
          y -= 25
          c.line(70, y, width - 70, y)
          y -= 25

          c.setFont("Helvetica-Bold", 13)
          c.drawString(70, y, "Summary Metrics")
          y -= 20
          c.setFont("Helvetica", 11)
          for k, v in m.items():
              c.drawString(80, y, f"{k.replace('_', ' ').title()}: {v}")
              y -= 15

          y -= 15
          c.setFont("Helvetica-Bold", 13)
          c.drawString(70, y, "Detected Issues")
          y -= 20
          c.setFont("Helvetica", 10)

          issues_sorted = sorted(issues, key=lambda x: x["severity"], reverse=True)
          for issue in issues_sorted:
              msg = issue.get("message", "")
              typ = issue["type"]
              sev = issue["severity"]
              status = issue.get("status", "")
              file = issue.get("component", "").split(":")[-1]
              line = issue.get("line", "N/A")
              rule = issue.get("rule", "N/A")

              c.setFont("Helvetica-Bold", 10)
              c.setFillColor(colors.black)
              c.drawString(80, y, f"Type: {typ}, Severity: {sev}, Status: {status}")
              y -= 12
              c.setFont("Helvetica-Oblique", 9)
              c.setFillColor(colors.gray)
              c.drawString(100, y, msg)
              y -= 12
              c.setFont("Helvetica", 9)
              c.setFillColor(colors.black)
              c.drawString(100, y, f"File: {file}, Line: {line}, Rule: {rule}")
              y -= 18

              if y < 100:
                  c.showPage()
                  y = height - 80

          c.setFont("Helvetica-Oblique", 9)
          c.setFillColor(colors.gray)
          c.drawString(70, 60, "End of Report — Generated automatically by GitHub Actions & SonarCloud.")
          c.save()

          print("✅ Report generated at:", output_path)
          print("File exists:", os.path.exists(output_path))
          EOF

      # 5. อัปโหลด PDF เป็น Artifact
      - name: Upload PDF Report
        if: env.status == 'OK'
        uses: actions/upload-artifact@v4
        with:
          name: sonarcloud-report
          path: ${{ github.workspace }}/Sonar_Report.pdf

      # 6. แจ้งเตือนเมื่อไม่ผ่าน
      - name: Fail if Quality Gate failed
        if: env.status != 'OK'
        run: |
          echo "SonarCloud Quality Gate failed. Please review the issues in SonarCloud dashboard."
          exit 1
