name: SonarCloud CI & Security Report

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarcloud:
    name: SonarCloud Scan and Generate Report
    runs-on: ubuntu-latest

    steps:
      # 1. ดึงโค้ดจาก GitHub
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ต้องเป็น 0 เพื่อให้ SonarCloud อ่าน commit history ได้ถูกต้อง

      # 2. รันการสแกนด้วย SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.organization=nittayajp31-create
            -Dsonar.projectKey=devjp31_sample-app
            -Dsonar.host.url=https://sonarcloud.io

      # 3. ตรวจสอบสถานะ Quality Gate จาก SonarCloud API
      - name: Check Quality Gate status
        id: qualitygate
        run: |
          echo "Checking SonarCloud Quality Gate status..."
          response=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=devjp31_sample-app")

          echo "Response: $response"
          status=$(echo $response | jq -r '.projectStatus.status')

          echo "Quality Gate Status: $status"
          # บันทึกสถานะเป็น Environment variable เพื่อใช้ในขั้นตอนต่อไป
          echo "status=$status" >> $GITHUB_ENV

      # 4. สร้างรายงาน PDF เมื่อผลสแกน “ผ่าน”
      - name: Generate Detailed PDF Report
        if: env.status == 'OK'
        run: |
          echo "Generating detailed SonarCloud PDF Report..."
          sudo apt-get update && sudo apt-get install -y python3-pip
          pip install reportlab requests

          python <<EOF
          import requests
          from reportlab.lib.pagesizes import A4
          from reportlab.pdfgen import canvas
          from reportlab.lib import colors

          TOKEN = "${{ secrets.SONAR_TOKEN }}"
          PROJECT_KEY = "devjp31_sample-app"
          HOST = "https://sonarcloud.io"

          # ดึงข้อมูลสรุปคะแนน
          metrics = "bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density"
          summary = requests.get(
              f"{HOST}/api/measures/component?component={PROJECT_KEY}&metricKeys={metrics}",
              auth=(TOKEN, "")
          ).json()["component"]["measures"]

          # ดึง Issues รายละเอียด
          issues = requests.get(
              f"{HOST}/api/issues/search?componentKeys={PROJECT_KEY}&ps=100",
              auth=(TOKEN, "")
          ).json()["issues"]

          # เริ่มสร้าง PDF
          c = canvas.Canvas("Sonar_Report.pdf", pagesize=A4)
          c.setFont("Helvetica-Bold", 18)
          c.drawString(100, 800, "SonarCloud Security & Code Quality Report")

          c.setFont("Helvetica", 12)
          c.drawString(100, 780, f"Project: {PROJECT_KEY}")
          c.drawString(100, 765, f"Host: {HOST}")
          c.line(80, 760, 530, 760)

          # Section 1: Summary Metrics
          c.setFont("Helvetica-Bold", 14)
          c.drawString(100, 740, "Summary Metrics")
          y = 720
          for m in summary:
              c.setFont("Helvetica", 12)
              c.drawString(110, y, f"{m['metric'].replace('_', ' ').title()}: {m['value']}")
              y -= 18

          # Section 2: Issues Details
          c.setFont("Helvetica-Bold", 14)
          y -= 10
          c.drawString(100, y, "Detected Issues")
          y -= 20

          if not issues:
              c.setFont("Helvetica-Oblique", 12)
              c.drawString(120, y, "No issues found. Codebase is clean.")
          else:
              for issue in issues:
                  if y < 100:  # สร้างหน้าถัดไปเมื่อเต็มหน้า
                      c.showPage()
                      y = 800
                      c.setFont("Helvetica-Bold", 14)
                      c.drawString(100, y, "Detected Issues (continued)")
                      y -= 30

                  c.setFont("Helvetica", 11)
                  c.setFillColor(colors.black)
                  c.drawString(100, y, f"Type: {issue['type']}, Severity: {issue['severity']}")
                  y -= 15
                  c.setFont("Helvetica-Oblique", 10)
                  c.drawString(120, y, f"{issue['message']}")
                  y -= 12
                  c.setFont("Helvetica", 9)
                  c.setFillColor(colors.gray)
                  c.drawString(120, y, f"File: {issue.get('component', '')}, Line: {issue.get('line', 'N/A')}, Rule: {issue.get('rule', '')}")
                  y -= 20

          # สรุปท้ายรายงาน
          c.setFillColor(colors.black)
          c.setFont("Helvetica-Bold", 12)
          c.drawString(100, y-10, "End of Report")
          c.setFont("Helvetica-Oblique", 10)
          c.drawString(100, y-25, "Generated automatically by GitHub Actions and SonarCloud.")
          c.save()
          EOF


      # 5. อัปโหลด PDF เป็น Artifact (ให้ทีม Security ดาวน์โหลดได้)
      - name: Upload PDF Report
        if: env.status == 'OK'
        uses: actions/upload-artifact@v4
        with:
          name: sonarcloud-report
          path: Sonar_Report.pdf

      # 6. แจ้งเตือนเมื่อไม่ผ่าน
      - name: Fail if Quality Gate failed
        if: env.status != 'OK'
        run: |
          echo "SonarCloud Quality Gate failed. Please review the issues in SonarCloud dashboard."
          exit 1
